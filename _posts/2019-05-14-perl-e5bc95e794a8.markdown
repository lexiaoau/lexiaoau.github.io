---
author: lexiao
comments: true
date: 2019-05-14 01:34:43+00:00
layout: post
link: http://localhost/blog/?p=325
slug: perl-%e5%bc%95%e7%94%a8
title: perl “引用”
wordpress_id: 325
categories:
- perl
---

  


  

    
    $scalarref = \$foo;
    $constref  = \186_282.42;
    $arrayref  = \@ARGV;
    $hashref   = \%ENV;
    $coderef   = \&handler;
    $globref   = \*STDOUT;
    
    <br>
    
    <b><u>匿名数组</u></b>
    
    create a reference to an anonymous array with square brackets:
    
    $arrayref = [1, 2, ['a', 'b', 'c', 'd']];

  


  


  


  


  


  


  


  


  


$  $arrayref  [2] = "Dorian";  #1

${ $arrayref }[2] = "Dorian";  #2  注意： deference 使用的是 { } , 而不是 （） 。

$arrayref->[2] = "Dorian";  #3

  


$  $hashref  {KEY} = "F#major";  #1

${ $hashref }{KEY} = "F#major";  #2

$hashref->{KEY} = "F#major";  #3

  


& $coderef  (Presto => 192);  #1

&{ $coderef }(Presto => 192);  #2

$coderef->(Presto => 192);  #3

$array[3]->{"English"}->[0]; 

### the fourth element of @array is intended to be a hash reference, and the value of the "English" entry in that hash is intended to be an array reference.

  


  


  


  


以下代码中， reflist 是一个包含多个ref的列表（list）。在第2行代码中，第一个 \ 表明对括号中每个元素进行引用；起到了和第1行同样的作用。

第3 、 4行是类似的代码。
    
    @<font color="#ff00ff">reflist </font>= (\$s, \@a, \%h, \&f);     # List of four references<br>@<span style="background-color: rgb(255, 0, 255);">reflist </span>= \($s,  @a   %h,  &f);     # Same thing
    
    @<span style="background-color: rgb(255, 0, 255);">reflist </span>= \(@x);                    # Interpolate array, then get refs<br>@<span style="background-color: rgb(255, 0, 255);">reflist </span>= map { \$_ } @x;           # Same thing

  


以下几行代码生成同样的结果，虽然含义可能不一样。
    
    @envrefs = \@ENV{'HOME', 'TERM'};         # Backslashing a slice<br>@envrefs = \( $ENV{HOME},  $ENV{TERM} );  # Backslashing a list<br>@envrefs = ( \$ENV{HOME}, \$ENV{TERM} );  # A list of two references

  


可以对函数返回的list 直接生成 ref 。

  

    
    @reflist = <span style="background-color: rgb(204, 153, 255);">\fx()</span>;<br>@reflist = map { \$_ } fx();                # Same thing<br><br>@reflist = <span style="background-color: rgb(204, 153, 255);">\( fx(), fy(), fz() )</span>;<br>@reflist = ( \fx(), \fy(), \fz() );         # Same thing<br>@reflist = map { \$_ } fx(), fy(), fz();    # Same thing

  


“\” 提供的是列表上下文。

以下代码强迫转换成标量，然后再去ref。
    
    $dateref = \scalar localtime();    # \"Sat Jul 16 11:42:18 2000"

  


“ref” 操作符，类似于“typeof”， 使用与 reference 上面，返回其类型，如 ARRAY， HASH 之类。

  


  


  


如果想使用非字符串作为  hash 的key，可以参考以下代码:
    
    use <font color="#cc99ff">Tie::RefHash</font>;<br><font color="#ff00ff">tie </font>my %h, '<font color="#ff00ff">Tie::RefHash</font>';<br>%h = (<br>    <span style="background-color: rgb(204, 153, 255);">["this", "here"]</span>   => "at home",<br>    ["that", "there"]  => "elsewhere",<br>);<br>while ( my($keyref, $value) = each %h ) {<br>    print "@$keyref is $value\n";<br>}

  


  


  


**注意：**

  1. reference 如果用作 hash的 key，那么就会被转换成字符串（内容是内存地址）。因为一般hash的key只能是字符串。因此，在取出key之后，就不能再对其作  de-reference 。

  


  


  


  


  

