---
author: lexiao
comments: true
date: 2019-05-15 11:11:11+00:00
layout: post
link: http://localhost/blog/?p=445
published: false
slug: null
title: es6 函数
wordpress_id: 445
categories:
- es6
- javascript
- 前端
---

  
  
http://es6.ruanyifeng.com/#docs/function  
  
  
  


ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">function</span> <span>log<span style="color: #f8f8f2;">(</span></span>x<span style="color: #f8f8f2;">,</span> y <span style="color: #f92672;">=</span> <span>'World'</span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span>x<span style="color: #f8f8f2;">,</span> y<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br><br></br><span>log<span style="color: #f8f8f2;">(</span></span><span>'Hello'</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"> // Hello World<br></br></span><span>log<span style="color: #f8f8f2;">(</span></span><span>'Hello'</span><span style="color: #f8f8f2;">,</span> <span>'China'</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"> // Hello China<br></br></span><span>log<span style="color: #f8f8f2;">(</span></span><span>'Hello'</span><span style="color: #f8f8f2;">,</span> <span>''</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"> // Hello<br></br></span></code>

  


  


## rest 参数

ES6 引入 rest 参数（形式为`...变量名`），用于获取函数的多余参数，这样就不需要使用`arguments`对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">function</span> <span>add<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">.</span>values<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">let</span> sum <span style="color: #f92672;">=</span> <span style="color: #ae81ff;">0</span><span style="color: #f8f8f2;">;</span><br></br><br></br>  <span style="color: #66d9ef;">for</span> <span style="color: #f8f8f2;">(</span><span style="color: #66d9ef;">var</span> val of values<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>    sum <span style="color: #f92672;">+</span><span style="color: #f92672;">=</span> val<span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><br></br><br></br>  <span style="color: #66d9ef;">return</span> sum<span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br><br></br><span>add<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">5</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">3</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"> // 10<br></br></span></code>

上面代码的`add`函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。

  
  

    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #75715e;" spellcheck="true"><br></br></span></code>

## 箭头函数

### 
    
    <code style="border-radius: 2px; color: #a6e22e; direction: ltr; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;"><span style="color: #66d9ef; font-size: 0.7rem; word-spacing: normal;"><span style="color: #66d9ef; font-size: 0.7rem; word-spacing: normal;">let</span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;"> fn </span><span style="color: #f92672; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f8f8f2; font-size: 0.7rem; word-spacing: normal;">(</span><span style="color: #f8f8f2; font-size: 0.7rem; word-spacing: normal;">)</span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f92672; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #f92672; font-size: 0.7rem; word-spacing: normal;">></span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;"> void </span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;">doesNotReturn<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2; font-size: 0.7rem; word-spacing: normal;">)</span><span style="color: #f8f8f2; font-size: 0.7rem; word-spacing: normal;">;</span></span></span></code>         // 无参数，单语句，w
    
    <code style="border-radius: 2px; color: #a6e22e; direction: ltr; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;"><span style="color: #66d9ef; font-size: 0.7rem; word-spacing: normal;">var</span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;"> f </span><span style="color: #f92672; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f8f8f2; font-size: 0.7rem; word-spacing: normal;">(</span><span style="color: #f8f8f2; font-size: 0.7rem; word-spacing: normal;">)</span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f92672; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #f92672; font-size: 0.7rem; word-spacing: normal;">></span><span style="color: #a6e22e; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #ae81ff; font-size: 0.7rem; word-spacing: normal;">5</span><span style="color: #f8f8f2; font-size: 0.7rem; word-spacing: normal;">;</span></span></code><span style="font-size: 15.36px;">         // 无参数，单语句</span>
    
    <code style="border-radius: 2px; color: #a6e22e; direction: ltr; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">var</span> f <span style="color: #f92672;">=</span> v <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> v<span style="color: #f8f8f2;">;</span></code>         // 单参数，单语句
    
    <span style="color: #66d9ef; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">let</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> getTempItem </span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> id </span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">></span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">(</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">{</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> id</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">:</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> id</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">,</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> name</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">:</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">"Temp"</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">}</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">)</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">;</span>        // 单参数，单语句，返回一个对象：圆括号+大括号
    
    <span style="color: #66d9ef; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">var</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> sum </span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">(</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">num1</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">,</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> num2</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">)</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">></span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> num1 </span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">+</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> num2</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">;</span>                  // 多参数，单语句
    
    <span style="color: #66d9ef; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">var</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> sum </span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">(</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">num1</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">,</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> num2</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">)</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">=</span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">></span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">{</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #66d9ef; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">return</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> num1 </span><span style="color: #f92672; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">+</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> num2</span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">;</span><span style="color: #a6e22e; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;"> </span><span style="color: #f8f8f2; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; word-spacing: normal;">}</span>         // 多参数，多语句，要return+大括号
    
    <code style="border-radius: 2px; direction: ltr; font-family: consolas, "courier new", courier, freemono, monospace; font-size: 0.7rem; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;">
    
    <br></br>

`

### 基本用法

ES6 允许使用“箭头”（`=>`）定义函数。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">var</span> f <span style="color: #f92672;">=</span> v <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> v<span style="color: #f8f8f2;">;</span><br></br><span style="color: #75715e;" spellcheck="true"><br></br>// 等同于<br></br></span><span style="color: #66d9ef;">var</span> f <span style="color: #f92672;">=</span> <span style="color: #66d9ef;">function</span> <span style="color: #f8f8f2;">(</span>v<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">return</span> v<span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br></code>

如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">var</span> f <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #ae81ff;">5</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"><br></br>// 等同于<br></br></span><span style="color: #66d9ef;">var</span> f <span style="color: #f92672;">=</span> <span style="color: #66d9ef;">function</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span> <span style="color: #66d9ef;">return</span> <span style="color: #ae81ff;">5</span> <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br><br></br><span style="color: #66d9ef;">var</span> sum <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span>num1<span style="color: #f8f8f2;">,</span> num2<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> num1 <span style="color: #f92672;">+</span> num2<span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"><br></br>// 等同于<br></br></span><span style="color: #66d9ef;">var</span> sum <span style="color: #f92672;">=</span> <span style="color: #66d9ef;">function</span><span style="color: #f8f8f2;">(</span>num1<span style="color: #f8f8f2;">,</span> num2<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">return</span> num1 <span style="color: #f92672;">+</span> num2<span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br></code>

如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用`return`语句返回。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">var</span> sum <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span>num1<span style="color: #f8f8f2;">,</span> num2<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span> <span style="color: #66d9ef;">return</span> num1 <span style="color: #f92672;">+</span> num2<span style="color: #f8f8f2;">;</span> <span style="color: #f8f8f2;">}</span><br></br></code>

由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #75715e;" spellcheck="true">// 报错<br></br></span><span style="color: #66d9ef;">let</span> getTempItem <span style="color: #f92672;">=</span> id <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span> id<span style="color: #f8f8f2;">:</span> id<span style="color: #f8f8f2;">,</span> name<span style="color: #f8f8f2;">:</span> <span>"Temp"</span> <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #75715e;" spellcheck="true"><br></br>// 不报错<br></br></span><span style="color: #66d9ef;">let</span> getTempItem <span style="color: #f92672;">=</span> id <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">{</span> id<span style="color: #f8f8f2;">:</span> id<span style="color: #f8f8f2;">,</span> name<span style="color: #f8f8f2;">:</span> <span>"Temp"</span> <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br></code>

下面是一种特殊情况，虽然可以运行，但会得到错误的结果。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">let</span> foo <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span> a<span style="color: #f8f8f2;">:</span> <span style="color: #ae81ff;">1</span> <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br><span>foo<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"> // undefined<br></br></span></code>

上面代码中，原始意图是返回一个对象`{ a: 1 }`，但是由于引擎认为大括号是代码块，所以执行了一行语句`a: 1`。这时，`a`可以被解释为语句的标签，因此实际执行的语句是`1;`，然后函数就结束了，没有返回值。

如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">let</span> fn <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> void <span>doesNotReturn<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br></code>

箭头函数可以与变量解构结合使用。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;">const full <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">{</span> first<span style="color: #f8f8f2;">,</span> last <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> first <span style="color: #f92672;">+</span> <span>' '</span> <span style="color: #f92672;">+</span> last<span style="color: #f8f8f2;">;</span><br></br><span style="color: #75715e;" spellcheck="true"><br></br>// 等同于<br></br></span><span style="color: #66d9ef;">function</span> <span>full<span style="color: #f8f8f2;">(</span></span>person<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">return</span> person<span style="color: #f8f8f2;">.</span>first <span style="color: #f92672;">+</span> <span>' '</span> <span style="color: #f92672;">+</span> person<span style="color: #f8f8f2;">.</span>last<span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br></code>

箭头函数使得表达更加简洁。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;">const isEven <span style="color: #f92672;">=</span> n <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> n <span style="color: #f92672;">%</span> <span style="color: #ae81ff;">2</span> <span style="color: #f92672;">===</span> <span style="color: #ae81ff;">0</span><span style="color: #f8f8f2;">;</span><br></br>const square <span style="color: #f92672;">=</span> n <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> n <span style="color: #f92672;">*</span> n<span style="color: #f8f8f2;">;</span><br></br></code>

上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。

箭头函数的一个用处是简化回调函数。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #75715e;" spellcheck="true">// 正常函数写法<br></br></span><span style="color: #f8f8f2;">[</span><span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span><span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">,</span><span style="color: #ae81ff;">3</span><span style="color: #f8f8f2;">]</span><span style="color: #f8f8f2;">.</span><span>map<span style="color: #f8f8f2;">(</span></span><span style="color: #66d9ef;">function</span> <span style="color: #f8f8f2;">(</span>x<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">return</span> x <span style="color: #f92672;">*</span> x<span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #75715e;" spellcheck="true"><br></br>// 箭头函数写法<br></br></span><span style="color: #f8f8f2;">[</span><span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span><span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">,</span><span style="color: #ae81ff;">3</span><span style="color: #f8f8f2;">]</span><span style="color: #f8f8f2;">.</span><span>map<span style="color: #f8f8f2;">(</span></span>x <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> x <span style="color: #f92672;">*</span> x<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br></code>

另一个例子是
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #75715e;" spellcheck="true">// 正常函数写法<br></br></span><span style="color: #66d9ef;">var</span> result <span style="color: #f92672;">=</span> values<span style="color: #f8f8f2;">.</span><span>sort<span style="color: #f8f8f2;">(</span></span><span style="color: #66d9ef;">function</span> <span style="color: #f8f8f2;">(</span>a<span style="color: #f8f8f2;">,</span> b<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">return</span> a <span style="color: #f92672;">-</span> b<span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #75715e;" spellcheck="true"><br></br>// 箭头函数写法<br></br></span><span style="color: #66d9ef;">var</span> result <span style="color: #f92672;">=</span> values<span style="color: #f8f8f2;">.</span><span>sort<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">(</span>a<span style="color: #f8f8f2;">,</span> b<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> a <span style="color: #f92672;">-</span> b<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br></code>

下面是 rest 参数与箭头函数结合的例子。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;">const numbers <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">.</span>nums<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> nums<span style="color: #f8f8f2;">;</span><br></br><br></br><span>numbers<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">3</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">4</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">5</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"><br></br>// [1,2,3,4,5]<br></br></span><br></br>const headAndTail <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span>head<span style="color: #f8f8f2;">,</span> <span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">.</span>tail<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">[</span>head<span style="color: #f8f8f2;">,</span> tail<span style="color: #f8f8f2;">]</span><span style="color: #f8f8f2;">;</span><br></br><br></br><span>headAndTail<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">3</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">4</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">5</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"><br></br>// [1,[2,3,4,5]]<br></br></span></code>

### 使用注意点

箭头函数有几个使用注意点。

（1）函数体内的`this`对象，就是定义时所在的对象，而不是使用时所在的对象。

（2）不可以当作构造函数，也就是说，不可以使用`new`命令，否则会抛出一个错误。

（3）不可以使用`arguments`对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。

（4）不可以使用`yield`命令，因此箭头函数不能用作 Generator 函数。

上面四点中，第一点尤其值得注意。`this`对象的指向是可变的，但是在箭头函数中，它是固定的。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">function</span> <span>foo<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span>setTimeout<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>    console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span><span>'id:'</span><span style="color: #f8f8f2;">,</span> <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>id<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">100</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br><br></br><span style="color: #66d9ef;">var</span> id <span style="color: #f92672;">=</span> <span style="color: #ae81ff;">21</span><span style="color: #f8f8f2;">;</span><br></br><br></br>foo<span style="color: #f8f8f2;">.</span><span>call<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">{</span> id<span style="color: #f8f8f2;">:</span> <span style="color: #ae81ff;">42</span> <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"><br></br>// id: 42<br></br></span></code>

上面代码中，`setTimeout`的参数是一个箭头函数，这个箭头函数的定义生效是在`foo`函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时`this`应该指向全局对象`window`，这时应该输出`21`。但是，箭头函数导致`this`总是指向函数定义生效时所在的对象（本例是`{id: 42}`），所以输出的是`42`。

箭头函数可以让`setTimeout`里面的`this`，绑定定义时所在的作用域，而不是指向运行时所在的作用域。下面是另一个例子。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">function</span> <span>Timer<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>s1 <span style="color: #f92672;">=</span> <span style="color: #ae81ff;">0</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>s2 <span style="color: #f92672;">=</span> <span style="color: #ae81ff;">0</span><span style="color: #f8f8f2;">;</span><br></br> <span style="color: #75715e;" spellcheck="true"> // 箭头函数<br></br></span>  <span>setInterval<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>s1<span style="color: #f92672;">++</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">1000</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br> <span style="color: #75715e;" spellcheck="true"> // 普通函数<br></br></span>  <span>setInterval<span style="color: #f8f8f2;">(</span></span><span style="color: #66d9ef;">function</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>    <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>s2<span style="color: #f92672;">++</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">1000</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br><br></br><span style="color: #66d9ef;">var</span> timer <span style="color: #f92672;">=</span> <span style="color: #66d9ef;">new</span> <span>Timer</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><br></br><span>setTimeout<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span><span>'s1: '</span><span style="color: #f8f8f2;">,</span> timer<span style="color: #f8f8f2;">.</span>s1<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">3100</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span>setTimeout<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span><span>'s2: '</span><span style="color: #f8f8f2;">,</span> timer<span style="color: #f8f8f2;">.</span>s2<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">3100</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"><br></br>// s1: 3<br></br></span><span style="color: #75715e;" spellcheck="true">// s2: 0<br></br></span></code>

上面代码中，`Timer`函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的`this`绑定定义时所在的作用域（即`Timer`函数），后者的`this`指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，`timer.s1`被更新了 3 次，而`timer.s2`一次都没更新。

箭头函数可以让`this`指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM 事件的回调函数封装在一个对象里面。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">var</span> handler <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">{</span><br></br>  id<span style="color: #f8f8f2;">:</span> <span>'123456'</span><span style="color: #f8f8f2;">,</span><br></br><br></br>  init<span style="color: #f8f8f2;">:</span> <span style="color: #66d9ef;">function</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>    document<span style="color: #f8f8f2;">.</span><span>addEventListener<span style="color: #f8f8f2;">(</span></span><span>'click'</span><span style="color: #f8f8f2;">,</span><br></br>      event <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span><span>doSomething<span style="color: #f8f8f2;">(</span></span>event<span style="color: #f8f8f2;">.</span>type<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">false</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">,</span><br></br><br></br>  doSomething<span style="color: #f8f8f2;">:</span> <span style="color: #66d9ef;">function</span><span style="color: #f8f8f2;">(</span>type<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>    console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span><span>'Handling '</span> <span style="color: #f92672;">+</span> type  <span style="color: #f92672;">+</span> <span>' for '</span> <span style="color: #f92672;">+</span> <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>id<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><br></br><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br></code>

上面代码的`init`方法中，使用了箭头函数，这导致这个箭头函数里面的`this`，总是指向`handler`对象。否则，回调函数运行时，`this.doSomething`这一行会报错，因为此时`this`指向`document`对象。

`this`指向的固定化，并不是因为箭头函数内部有绑定`this`的机制，实际原因是箭头函数根本没有自己的`this`，导致内部的`this`就是外层代码块的`this`。正是因为它没有`this`，所以也就不能用作构造函数。

所以，箭头函数转成 ES5 的代码如下。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #75715e;" spellcheck="true">// ES6<br></br></span><span style="color: #66d9ef;">function</span> <span>foo<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span>setTimeout<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>    console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span><span>'id:'</span><span style="color: #f8f8f2;">,</span> <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>id<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">100</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br><span style="color: #75715e;" spellcheck="true"><br></br>// ES5<br></br></span><span style="color: #66d9ef;">function</span> <span>foo<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">var</span> _this <span style="color: #f92672;">=</span> <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">;</span><br></br><br></br>  <span>setTimeout<span style="color: #f8f8f2;">(</span></span><span style="color: #66d9ef;">function</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>    console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span><span>'id:'</span><span style="color: #f8f8f2;">,</span> _this<span style="color: #f8f8f2;">.</span>id<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">100</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br></code>

上面代码中，转换后的 ES5 版本清楚地说明了，箭头函数里面根本没有自己的`this`，而是引用外层的`this`。

请问下面的代码之中有几个`this`？
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">function</span> <span>foo<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">return</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>    <span style="color: #66d9ef;">return</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>      <span style="color: #66d9ef;">return</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>        console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span><span>'id:'</span><span style="color: #f8f8f2;">,</span> <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>id<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>      <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br>    <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br><br></br><span style="color: #66d9ef;">var</span> f <span style="color: #f92672;">=</span> foo<span style="color: #f8f8f2;">.</span><span>call<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">{</span>id<span style="color: #f8f8f2;">:</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><br></br><span style="color: #66d9ef;">var</span> t1 <span style="color: #f92672;">=</span> f<span style="color: #f8f8f2;">.</span><span>call<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">{</span>id<span style="color: #f8f8f2;">:</span> <span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"> // id: 1<br></br></span><span style="color: #66d9ef;">var</span> t2 <span style="color: #f92672;">=</span> <span>f<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">.</span><span>call<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">{</span>id<span style="color: #f8f8f2;">:</span> <span style="color: #ae81ff;">3</span><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"> // id: 1<br></br></span><span style="color: #66d9ef;">var</span> t3 <span style="color: #f92672;">=</span> <span>f<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">.</span><span>call<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">{</span>id<span style="color: #f8f8f2;">:</span> <span style="color: #ae81ff;">4</span><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"> // id: 1<br></br></span></code>

上面代码之中，只有一个`this`，就是函数`foo`的`this`，所以`t1`、`t2`、`t3`都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的`this`，它们的`this`其实都是最外层`foo`函数的`this`。

除了`this`，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：`arguments`、`super`、`new.target`。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">function</span> <span>foo<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span>setTimeout<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>    console<span style="color: #f8f8f2;">.</span><span>log<span style="color: #f8f8f2;">(</span></span><span>'args:'</span><span style="color: #f8f8f2;">,</span> arguments<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">100</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br><br></br><span>foo<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">4</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">6</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">8</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"><br></br>// args: [2, 4, 6, 8]<br></br></span></code>

上面代码中，箭头函数内部的变量`arguments`，其实是函数`foo`的`arguments`变量。

另外，由于箭头函数没有自己的`this`，所以当然也就不能用`call()`、`apply()`、`bind()`这些方法去改变`this`的指向。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #f8f8f2;">(</span><span style="color: #66d9ef;">function</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">return</span> <span style="color: #f8f8f2;">[</span><br></br>    <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>x<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">.</span><span>bind<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">{</span> x<span style="color: #f8f8f2;">:</span> <span>'inner'</span> <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span><br></br>  <span style="color: #f8f8f2;">]</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">.</span><span>call<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">{</span> x<span style="color: #f8f8f2;">:</span> <span>'outer'</span> <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"><br></br>// ['outer']<br></br></span></code>

上面代码中，箭头函数没有自己的`this`，所以`bind`方法无效，内部的`this`指向外部的`this`。

长期以来，JavaScript 语言的`this`对象一直是一个令人头痛的问题，在对象方法中使用`this`，必须非常小心。箭头函数”绑定”`this`，很大程度上解决了这个困扰。

### 不适用场合

由于箭头函数使得`this`从“动态”变成“静态”，下面两个场合不应该使用箭头函数。

_**第一个场合**_是定义函数的方法，且该方法内部包括`this`。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;">const cat <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">{</span><br></br>  lives<span style="color: #f8f8f2;">:</span> <span style="color: #ae81ff;">9</span><span style="color: #f8f8f2;">,</span><br></br>  jumps<span style="color: #f8f8f2;">:</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>    <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>lives<span style="color: #f92672;">--</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><br></br><span style="color: #f8f8f2;">}</span><br></br></code>

上面代码中，`cat.jumps()`方法是一个箭头函数，这是错误的。调用`cat.jumps()`时，如果是普通函数，该方法内部的`this`指向`cat`；如果写成上面那样的箭头函数，使得`this`指向全局对象，因此不会得到预期结果。

_**第二个场合**_是需要动态`this`的时候，也不应使用箭头函数。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">var</span> button <span style="color: #f92672;">=</span> document<span style="color: #f8f8f2;">.</span><span>getElementById<span style="color: #f8f8f2;">(</span></span><span>'press'</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>button<span style="color: #f8f8f2;">.</span><span>addEventListener<span style="color: #f8f8f2;">(</span></span><span>'click'</span><span style="color: #f8f8f2;">,</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">this</span><span style="color: #f8f8f2;">.</span>classList<span style="color: #f8f8f2;">.</span><span>toggle<span style="color: #f8f8f2;">(</span></span><span>'on'</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br></code>

上面代码运行时，点击按钮会报错，因为`button`的监听函数是一个箭头函数，导致里面的`this`就是全局对象。如果改成普通函数，`this`就会动态指向被点击的按钮对象。

另外，如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。

### 嵌套的箭头函数

箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">function</span> <span>insert<span style="color: #f8f8f2;">(</span></span>value<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>  <span style="color: #66d9ef;">return</span> <span style="color: #f8f8f2;">{</span>into<span style="color: #f8f8f2;">:</span> <span style="color: #66d9ef;">function</span> <span style="color: #f8f8f2;">(</span>array<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>    <span style="color: #66d9ef;">return</span> <span style="color: #f8f8f2;">{</span>after<span style="color: #f8f8f2;">:</span> <span style="color: #66d9ef;">function</span> <span style="color: #f8f8f2;">(</span>afterValue<span style="color: #f8f8f2;">)</span> <span style="color: #f8f8f2;">{</span><br></br>      array<span style="color: #f8f8f2;">.</span><span>splice<span style="color: #f8f8f2;">(</span></span>array<span style="color: #f8f8f2;">.</span><span>indexOf<span style="color: #f8f8f2;">(</span></span>afterValue<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">+</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">0</span><span style="color: #f8f8f2;">,</span> value<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>      <span style="color: #66d9ef;">return</span> array<span style="color: #f8f8f2;">;</span><br></br>    <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><br></br><br></br><span>insert<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">.</span><span>into<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">[</span><span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">3</span><span style="color: #f8f8f2;">]</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">.</span><span>after<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"> //[1, 2, 3]<br></br></span></code>

上面这个函数，可以使用箭头函数改写。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #66d9ef;">let</span> insert <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span>value<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">{</span>into<span style="color: #f8f8f2;">:</span> <span style="color: #f8f8f2;">(</span>array<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">{</span>after<span style="color: #f8f8f2;">:</span> <span style="color: #f8f8f2;">(</span>afterValue<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">{</span><br></br>  array<span style="color: #f8f8f2;">.</span><span>splice<span style="color: #f8f8f2;">(</span></span>array<span style="color: #f8f8f2;">.</span><span>indexOf<span style="color: #f8f8f2;">(</span></span>afterValue<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">+</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">0</span><span style="color: #f8f8f2;">,</span> value<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br>  <span style="color: #66d9ef;">return</span> array<span style="color: #f8f8f2;">;</span><br></br><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">}</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><br></br><span>insert<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">.</span><span>into<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">[</span><span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">,</span> <span style="color: #ae81ff;">3</span><span style="color: #f8f8f2;">]</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">.</span><span>after<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><span style="color: #75715e;" spellcheck="true"> //[1, 2, 3]<br></br></span></code>

下面是一个部署管道机制（pipeline）的例子，即前一个函数的输出是后一个函数的输入。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;">const pipeline <span style="color: #f92672;">=</span> <span style="color: #f8f8f2;">(</span><span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">.</span>funcs<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span><br></br>  val <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> funcs<span style="color: #f8f8f2;">.</span><span>reduce<span style="color: #f8f8f2;">(</span></span><span style="color: #f8f8f2;">(</span>a<span style="color: #f8f8f2;">,</span> b<span style="color: #f8f8f2;">)</span> <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span>b<span style="color: #f8f8f2;">(</span></span>a<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">,</span> val<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><br></br>const plus1 <span style="color: #f92672;">=</span> a <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> a <span style="color: #f92672;">+</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">;</span><br></br>const mult2 <span style="color: #f92672;">=</span> a <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> a <span style="color: #f92672;">*</span> <span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">;</span><br></br>const addThenMult <span style="color: #f92672;">=</span> <span>pipeline<span style="color: #f8f8f2;">(</span></span>plus1<span style="color: #f8f8f2;">,</span> mult2<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br><br></br><span>addThenMult<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">5</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"><br></br>// 12<br></br></span></code>

如果觉得上面的写法可读性比较差，也可以采用下面的写法。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;">const plus1 <span style="color: #f92672;">=</span> a <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> a <span style="color: #f92672;">+</span> <span style="color: #ae81ff;">1</span><span style="color: #f8f8f2;">;</span><br></br>const mult2 <span style="color: #f92672;">=</span> a <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> a <span style="color: #f92672;">*</span> <span style="color: #ae81ff;">2</span><span style="color: #f8f8f2;">;</span><br></br><br></br><span>mult2<span style="color: #f8f8f2;">(</span></span><span>plus1<span style="color: #f8f8f2;">(</span></span><span style="color: #ae81ff;">5</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><span style="color: #75715e;" spellcheck="true"><br></br>// 12<br></br></span></code>

箭头函数还有一个功能，就是可以很方便地改写 λ 演算。
    
    <code style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; border-radius: 2px; color: #a6e22e; direction: ltr; font-family: Consolas, "Courier New", Courier, FreeMono, monospace; font-size: 0.7rem; hyphens: none; tab-size: 4; text-shadow: rgba(0, 0, 0, 0.3) 0px 1px; word-break: normal; word-spacing: normal;"><span style="color: #75715e;" spellcheck="true">// λ演算的写法<br></br></span>fix <span style="color: #f92672;">=</span> λf<span style="color: #f8f8f2;">.</span><span style="color: #f8f8f2;">(</span>λx<span style="color: #f8f8f2;">.</span><span>f<span style="color: #f8f8f2;">(</span></span>λv<span style="color: #f8f8f2;">.</span><span>x<span style="color: #f8f8f2;">(</span></span>x<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span>v<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span>λx<span style="color: #f8f8f2;">.</span><span>f<span style="color: #f8f8f2;">(</span></span>λv<span style="color: #f8f8f2;">.</span><span>x<span style="color: #f8f8f2;">(</span></span>x<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span>v<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><br></br><span style="color: #75715e;" spellcheck="true"><br></br>// ES6的写法<br></br></span><span style="color: #66d9ef;">var</span> fix <span style="color: #f92672;">=</span> f <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span style="color: #f8f8f2;">(</span>x <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span>f<span style="color: #f8f8f2;">(</span></span>v <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span>x<span style="color: #f8f8f2;">(</span></span>x<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span>v<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><br></br>               <span style="color: #f8f8f2;">(</span>x <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span>f<span style="color: #f8f8f2;">(</span></span>v <span style="color: #f92672;">=</span><span style="color: #f92672;">></span> <span>x<span style="color: #f8f8f2;">(</span></span>x<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">(</span>v<span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">)</span><span style="color: #f8f8f2;">;</span><br></br></code>

上面两种写法，几乎是一一对应的。由于 λ 演算对于计算机科学非常重要，这使得我们可以用 ES6 作为替代工具，探索计算机科学。

  


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

