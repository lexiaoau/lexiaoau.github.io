---
author: lexiao
comments: true
date: 2019-05-14 01:35:53+00:00
layout: post
link: http://localhost/blog/?p=357
slug: c%e8%af%ad%e8%a8%80%e5%b8%b8%e7%94%a8-%e5%ad%97%e7%ac%a6%ef%bc%88%e4%b8%b2%ef%bc%89-%e5%a4%84%e7%90%86%e5%87%bd%e6%95%b0
title: C语言常用 字符（串） 处理函数
wordpress_id: 357
categories:
- pure-c
---

<p><br>/**********************************************************************<br> *                 <br> *             Character check<br> *<br> *********************************************************************/</p><p> char c;<br> <br> if (isalnum( c ))  printf("is an number or character.\n");  /*** either a decimal digit or an uppercase or lowercase letter.  ***/<br> if (isdigit( c ))  printf("is an number.\n");      /*** decimal digit character.  ***/<br> if (isalpha( c ))  printf("is a character.\n");    /*** uppercase or a lowercase alphabetic letter   ***/<br> <br> if (islower( c ))  printf("is a lower character.\n");  /*** lowercase alphabetic letter   ***/<br> if (isupper( c ))  printf("is a upper character.\n");  /*** uppercase alphabetic letter   ***/<br> <br> <br> if (isgraph( c ))  printf("is graphical.\n");    /*** printable characters except for whitespace characters   ***/<br> <br> if (ispunct( c ))  printf("is punctuation character.\n"); /*** printable characters but not isalnum()   ***/<br> <br> <br> /* misc */<br> int iscntrl ( int c );    /****  !isprint(i)   *************/<br> int isprint ( int c );               /*** ASCII except control character(0x1 ~ 0x1F)  ***/<br> int isspace ( int c );    /*** ' ' ---  '\t' --- '\n'---'\v'---'\f'----'\r'           ***/</p><p><br>/**********************************************************************<br> *                 <br> *             Character convert<br> *<br> *********************************************************************/<br> <br> char *str;<br> <br> float f;<br> int i;<br> <br> <br> double   atof ( const char * str );     /*** string  -->   double(float)          带符号，有数值 ***/<br> int   atoi ( const char * str );     /*** string  -->   integer       ***/<br> long int  atol ( const char * str );     /*** string  -->   long integer       ***/<br>  <br> int tolower ( int c );<br> int toupper ( int c );<br> <br> double strtod ( const char * str, char ** endptr );    /*** string  -->   double(float)          endptr 指向未被转换的部分字符 ***/<br> long int strtol ( const char * str, char ** endptr, int base );<br> unsigned long int strtoul ( const char * str, char ** endptr, int base );<br> <br> <br>/**********************************************************************<br> *                 <br> *             Character processing<br> *<br> *********************************************************************/            <br> <br> //  compare<br> int bcmp(const void *s1, const void *s2, int n);                   // compare first n characters<br> int memcmp(void *buf1, void *buf2, unsigned int count);<br> int strncasecmp(const char *s1, const char *s2, size_t n);   // compare and ignore case<br> <br> //  copy<br> void bcopy(const void *src, void *dest, int n);<br> void *memccpy(void *dest, void *src, unsigned char ch, unsigned int count);  // 由src所指内存区域复制不多于count个字节到dest所指内存区域，如果遇到字符ch则停止复制<br> char *strcpy(char *dest,char *src);<br> char *strncpy(char *dest, char *src, int n);<br> <br> // clear & fill<br> void bzero(void *s, int n);<br> void *memset(void *buffer, int c, int count);<br> <br> // find<br> char *index(const char *s, int c);<br> char *rindex(const char *s, int c);<br> <br> const char * strchr ( const char * str, int character );<br> const char * strrchr ( const char * str, int character );<br> <br> const void * memchr ( const void * ptr, int value, size_t num );<br> <br> const char * strpbrk ( const char * str1, const char * str2 );<br> <br> <br>/**********************************************************************<br> *                 <br> *             Character cat & cut<br> *<br> *********************************************************************/  <br> <br> char * strcat ( char * destination, const char * source );   // Appends a copy of the source string to the destination string. <br> <br>    /**************  Example **********************/<br>      char str[80];<br>      strcpy (str,"these ");<br>      strcat (str,"strings ");<br>      strcat (str,"are ");<br>      strcat (str,"concatenated.");<br>      puts (str);<br> <br> <br> char * strtok ( char * str, const char * delimiters );    // Split string into tokens<br>    /**************  Example **********************/<br>      char str[] ="- This, a sample string.";<br>      char * pch;<br>      printf ("Splitting string \"%s\" into tokens:\n",str);<br>      pch = strtok (str," ,.-");   ///////////////////////////////////////////<br>      while (pch != NULL)<br>      {<br>     printf ("%s\n",pch);<br>     pch = strtok (NULL, " ,.-"); ////////////////////////////////////<br>      }<br> <br> </p><p><br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> </p><p> </p><p> </p><p> </p><p> </p>
    
    <br>
