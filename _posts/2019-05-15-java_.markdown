---
author: lexiao
comments: true
date: 2019-05-15 11:11:11+00:00
layout: post
link: http://localhost/blog/?p=446
published: true
slug: null
title: java 面试
wordpress_id: 446
categories:
- java
- interview
---





[![](http://localhost/blog/wp-content/uploads/2019/04/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190401111511.png)](http://localhost/blog/wp-content/uploads/2019/04/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190401111511.png)









* * *


final  

[https://www.edureka.co/blog/interview-questions/java-interview-questions/](https://www.edureka.co/blog/interview-questions/java-interview-questions/)  
Q4  

[http://www.java2s.com/Tutorials/Java/Java_Object_Oriented_Design/0095__Java_final_Keyword.htm](http://www.java2s.com/Tutorials/Java/Java_Object_Oriented_Design/0095__Java_final_Keyword.htm)  



  * final Parameters

We can declare a parameter final. A parameter is initialized automatically with the value of the actual parameter when the method or the constructor is invoked.

Therefore, you cannot change the value of a final formal parameter inside the method's or the constructor's body.

  * final Instance Variables

We can declare an instance variable final and blank final.

A blank final instance variable must be initialized _once and only once when any of the constructors of the class is invoked_.

  * final Class Variables

We can declare a class variable final and blank final. We must initialize a blank final class variable in one of the static initializers.

  * final Reference Variables

A reference variable stores the reference of an object. A final reference variable means that _once it references an object (or null), it cannot be modified to reference another object_.

.  




* * *




### 多线程



请说出你所知道的线程同步的方法。  
wait():使一个线程处于等待状态，并且释放所持有的对象的lock。  
sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。  
notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定  
唤醒哪个线程，而且不是按优先级。  
Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。  


多线程有两种实现方法，分别是继承Thread类与实现Runnable接口  
同步的实现方面有两种，分别是synchronized,wait与notify  

Java中的线程有四种状态分别是：运行、就绪、挂起、结束。  

简述synchronized和java.util.concurrent.locks.Lock的异同？  
主要相同点：Lock能完成synchronized所实现的所有功能  
主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。  


java中有几种方法可以实现一个线程？  
用什么关键字修饰同步方法?   
stop()和suspend()方法为何不推荐使用？  

有两种实现方法，分别是继承Thread类与实现Runnable接口  
用synchronized关键字修饰同步方法  
反对使用stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。  
suspend()方法容易发生死锁。调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被”挂起”的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。所以不应该使用suspend()，而应在自己的Thread类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用 wait()命其进入等待状态。若标志指出线程应当恢复，则用一个notify()重新启动线程。  




[![](http://localhost/blog/wp-content/uploads/2019/04/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190407114634-300x202.png)](http://localhost/blog/wp-content/uploads/2019/04/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190407114634.png)

[![](http://localhost/blog/wp-content/uploads/2019/04/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190407115232.png)](http://localhost/blog/wp-content/uploads/2019/04/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190407115232.png)











* * *




### java 设计模式


j2ee常用的设计模式？说明工厂模式。  
Java中的23种设计模式：  
Factory（工厂模式）， Builder（建造模式）， Factory Method（工厂方法模式），  
Prototype（原始模型模式），Singleton（单例模式）， Facade（门面模式），  
Adapter（适配器模式）， Bridge（桥梁模式）， Composite（合成模式），  
Decorator（装饰模式）， Flyweight（享元模式）， Proxy（代理模式），  
Command（命令模式）， Interpreter（解释器模式）， Visitor（访问者模式），  
Iterator（迭代子模式）， Mediator（调停者模式）， Memento（备忘录模式），  
Observer（观察者模式）， State（状态模式）， Strategy（策略模式），  
Template Method（模板方法模式）， Chain Of Responsibleity（责任链模式）  
工厂模式：工厂模式是一种经常被使用到的模式，根据工厂模式实现的类可以根据提供的数据生成一组类中某一个类的实例，通常这  
一组类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作。首先需要定义一个基类，该  
类的子类通过不同的方法实现了基类中的方法。然后需要定义一个工厂类，工厂类可以根据条件生成不同的子类实例。当得到子类的  
实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。  





* * *




### 排序


排序都有哪几种方法？请列举。用JAVA实现一个快速排序。  
排序的方法有：插入排序（直接插入排序、希尔排序），交换排序（冒泡排序、快速排序），选择排序（直接选择排序、堆排序），  
归并排序，分配排序（箱排序、基数排序）  




* * *




### 异常处理




JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？





Java 通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在Java中，每个异常都是一个对象，它是Throwable类或其它子类的实例。

当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并进行处理。

Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。一般情况下是用try来执行一段程序，如果出现异常，系统会抛出（throws）一个异常，这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器来处理。  
用try来指定一块预防所有”异常”的程序。紧跟在try程序后面，应包含一个catch子句来指定你想要捕捉的”异常”的类型。  
throw语句用来明确地抛出一个”异常”。  
throws用来标明一个成员函数可能抛出的各种”异常”。  
Finally为确保一段代码不管发生什么”异常”都被执行一段代码。  
可以在一个成员函数调用的外面写一个try语句，在这个成员函数内部写另一个try语句保护其他代码。每当遇到一个try语句，”异常“的框架就放到堆栈上面，直到所有的try语句都完成。如果下一级的try语句没有对某种”异常”进行处理，堆栈就会展开，直到遇到有处理这种”异常”的try语句。

http://www.programfan.com/article/showarticle.asp?id=2731




* * *




# 接口和抽象类




接口和抽象类都是继承树的上层，

__共同点__：  
1) 都是上层的抽象层。  
2) 都不能被实例化  
3) 都能包含抽象的方法，这些抽象的方法用于描述类具备的功能，但是不比提供具体的实现。

4）抽象类可以拥有任意范围的成员数据  
__区别__：  
1) 在抽象类中可以写非抽象的方法，从而避免在子类中重复书写他们，这样可以提高代码的复用性，这是抽象类的优势；接口中只能有抽象的方法。  
2) 一个类只能继承一个直接父类，这个父类可以是具体的类也可是抽象类；但是一个类可以实现多个接口。

3）仅能够有静态、不能修改的成员数据

[![](http://localhost/blog/wp-content/uploads/2019/04/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190403114331.png)](http://localhost/blog/wp-content/uploads/2019/04/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190403114331.png)














* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *







* * *
