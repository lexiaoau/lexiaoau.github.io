---
author: lexiao
comments: true
date: 2019-05-14 01:35:08+00:00
layout: post
link: http://localhost/blog/?p=341
slug: python-%e5%a4%84%e7%90%86%e4%b8%ad%e6%96%87%e7%9a%84%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%ef%bc%8c%e6%8a%8a%e7%a9%ba%e6%a0%bc%e6%9b%bf%e6%8d%a2%e6%88%90%e5%85%b6%e5%ae%83%e5%ad%97%e7%ac%a6
title: python 处理中文的正则表达式，把空格替换成其它字符
wordpress_id: 341
categories:
- python
---

<p>		try:<br>			if type(tr) is not bs4.element.Tag: continue		<br>            <br>			td = tr.td<br>			#print td<br>			print '---'<br>			td = td.next_sibling<br>			.......<br>			<br>			report_ct = td.div.a['href'] if td.div.a['href'] else 'N/A'<br>			report_url = "http://data.eastmoney.com"+td.div.a['href'] if td.div.a['href'] else 'N/A'			<br>			report_title = td.div.a['title'] if td.div.a['title'] else 'N/A'<br>			<br>			report_info = ''<br>			report_content = ''<br>			full_url = report_url<br>			try:<br>				proxies = {<br>					"http":  "http://www-proxy.ericsson.se:8080",<br>					"https": "http://www-proxy.ericsson.se:8080"<br>				}<br>				print "full_url" + full_url<br>				#response = urllib2.urlopen(full_url)<br>				response = requests.get(full_url, proxies=proxies)<br>				print response.status_code<br>				# report_content_source = response.read()<br>				# response.close()<br>							 <br>				#soup = BeautifulSoup(report_content_source)<br>				soup = BeautifulSoup(response.text)<br>			 <br>				infos = soup.find("div",{"class":"report-infos"})<br>				<br>				if infos == None:<br>					print 'infos is none'<br>				<br>				#spans = infos.find_all('span')<br>				<br>				rp = soup.find(id="ContentBody")<br>				if rp == None:<br>					print 'rp is none'<br>							 <br>				# for span in spans:<br>					# if span.string:<br>						# report_info+=span.string+' '<br>							 <br>						# content_body = soup.find('div',id='ContentBody')                <br>						# ps = content_body.find_all('p')<br>						# for p in ps:<br>							# if p.string:<br>								# report_content+=p.string+' '<br>								<br>				if bool == True:<br>					# print type(infos.string)<br>					# print type(infos.strings)<br>					# print type(unicode(infos.string))<br>					spans = infos.find_all('span')<br>					print '====== %d' % sys._getframe().f_lineno			#####  打印行号<br>					info_han = open('ct_info.txt', 'w')<br>					print '====== %d' %  sys._getframe().f_lineno			#####  打印行号<br>					for span in spans:<br>						if span.string:<br>							info_han.write( (span.string+'_') )<br>					print '====== %d' %  sys._getframe().f_lineno			#####  打印行号<br>					info_han.close()<br>					<br>					ps = rp.find_all('p')<br>					ct_han = open('ct_content.txt', 'w')<br>					for p in ps:<br>						if p.string:<br>							#print p.string.decode('utf-8')<br>							zenstring = unicode(p.string)							#####  转换成unicode字符串<br>							#pattern=ur'^\s+'<br>							#unicode_pattern=re.compile(u"\A\s+", re.U)<br>							head_unicode_pattern=re.compile(ur"^[\u3000|\u0020]+", re.U)	#####  包含全角和半角空格<br>							#tail_unicode_pattern=re.compile(ur"$", re.U)<br>							re.UNICODE<br>							#re.sub(ur'^\s+', 'p', zenstring, 1)<br>							#re.sub(u'　', u'你好', zenstring, 11)<br>							#zenstring1 = re.sub(u"\s+", u'<p>', zenstring, 11)<br>							zenstring = re.sub(head_unicode_pattern, u'<p>', zenstring, 1)<br>							zenstring += ur'</p>'<br>							#re.sub(r'\s+$', '</p>', zenstring, 1)<br>							#print zenstring.decode('utf-8')<br>							ct_han.write(zenstring)					<br>					ct_han.close()<br>					bool = False<br>			except Exception as e:<br>				print e</p><p><br></p><p><br></p><p><br></p><p>*************  core python   ***************************</p><p>####  检查匹配成功是否，应该用   is not None</p><p><font color="#ff0000">注意</font>： match 是从字符串开头开始搜索，如果希望从中间开始搜索，使用“search”</p><p><br><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">m = re.match('foo', 'foo') <br></span></p><p><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">>>> <span style="font-family: LucidaSansTypewriterStd-Bd; font-size: 8pt;"><b>if </b><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">m <span style="font-family: LucidaSansTypewriterStd-Bd; font-size: 8pt;"><b style="background-color: rgb(255, 255, 153);">is not </b><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;"><span style="background-color: rgb(255, 255, 153);">None</span>: # show match if successful<br><span style="font-size: 8pt;">... m.group()</span><br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></span></span></span></span></p><p>#### 匹配多个字符串</p><p><br><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">>>> bt = <span style="background-color: rgb(255, 255, 0);">'bat|bet|bit'</span> # regex pattern: bat, bet, bit<br><span style="font-size: 8pt;">>>> m = re.match(bt, 'bat') # 'bat' is a match</span><br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></p><p>#### 子组匹配<br><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">>>> m = re.match('<span style="background-color: rgb(255, 255, 0);">(\w\w\w)</span>-<span style="background-color: rgb(255, 255, 0);">(\d\d\d)</span>', 'abc-123')<br><span style="font-size: 8pt;">>>> m.group() # entire match<br><span style="font-size: 8pt;">'abc-123'<br><span style="font-size: 8pt;">>>> m.group(1) # subgroup 1<br><span style="font-size: 8pt;">'abc'<br><span style="font-size: 8pt;">>>> m.group(2) # subgroup 2<br><span style="font-size: 8pt;">'123'<br><span style="font-size: 8pt;">>>> m.groups() # all subgroups<br><span style="font-size: 8pt;">('abc', '123')</span></span></span></span></span></span></span></span><br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></p><p><br><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">>>> m = re.match('<span style="background-color: rgb(255, 255, 0);">(a(b))</span>', 'ab') # two subgroups<br><span style="font-size: 8pt;">>>> m.group() # entire match<br><span style="font-size: 8pt;">'ab'<br><span style="font-size: 8pt;">>>> m.group(1) # subgroup 1<br><span style="font-size: 8pt;">'ab'<br><span style="font-size: 8pt;">>>> m.group(2) # subgroup 2<br><span style="font-size: 8pt;">'b'<br><span style="font-size: 8pt;">>>> m.groups() # all subgroups<br><span style="font-size: 8pt;">('ab', 'b')</span></span></span></span></span></span></span></span><br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></p><p><br></p><p>#### findall 的用法：</p><p><span style="font-family: SimSun; font-size: 12pt;">findall()总返回一个列表。如果 findall()没有找到匹配的部分，会返回空<span style="font-size: 12pt;"><br>列表；如果成功找到匹配部分，则返回所有匹配部分的列表(按从左到右出现的顺序排列)<br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></span><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">>>> re.<span style="background-color: rgb(255, 255, 0);">findall('car', 'carry the barcardi to the car')<br><span style="font-size: 8pt;">['car', 'car', 'car']</span></span><br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></p><p><br><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">>>> s = 'This and that.'<br><span style="font-size: 8pt;">>>> re.<span style="background-color: rgb(255, 255, 0);">findall</span>(r'(th\w+) and (th\w+)', s, <span style="background-color: rgb(255, 255, 0);">re.I</span>)    ## re.I 开关<br><span style="font-size: 8pt;">[('This', 'that')]<br><span style="font-size: 8pt;">>>> re.<span style="background-color: rgb(255, 255, 0);">finditer</span>(r'(th\w+) and (th\w+)', s,<span style="font-size: 8pt;"> re.I)<span style="background-color: rgb(255, 255, 0);">.next().groups()</span><br><span style="font-size: 8pt;">('This', 'that')<br><span style="font-size: 8pt;">>>> re.finditer(r'(th\w+) and (th\w+)', s,<span style="font-size: 8pt;"> re.I).next().group(1)<br><span style="font-size: 8pt;">'This'<br><span style="font-size: 8pt;">>>> re.finditer(r'(th\w+) and (th\w+)', s,<span style="font-size: 8pt;">re.I).next().group(2)<br><span style="font-size: 8pt;">'that'<br><span style="font-size: 8pt;">>>> [g.groups() <span style="font-family: LucidaSansTypewriterStd-Bd; font-size: 8pt;"><b>for </b><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">g <span style="font-family: LucidaSansTypewriterStd-Bd; font-size: 8pt;"><b>in </b><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">re.finditer(r'(th\w+) and (th\w+)',<span style="font-size: 8pt;"> s, re.I)]<br><span style="font-size: 8pt;">[('This', 'that')]</span></span></span></span></span></span></span></span></span></span></span></span></span></span><br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></span></span></span></span></p><p><br></p><p><span style="line-height: 28px;">#### sub 和 subn 的用法：</span></p><p><br><span style="font-family: SimSun; font-size: 12pt;">将某<span style="font-family: Calibri-Bold; font-size: 9pt; color: rgb(255, 0, 0);"><span style="font-size: 9pt;"><span style="font-size: 12pt; color: rgb(0, 0, 0);">字符串中所有匹配正则表达式模式的部分进行替换。用来替换的部分通常是一个字符串，但也可能<span style="font-size: 12pt;"><br>是一个函数，该函数返回一个用来替换的字符串。subn()和 sub()一样，但它还返回一个表示替换次<span style="font-size: 12pt;"><br>数的数字，替换后的字符串和表示替换次数的数字作为一个元组的元素返回。</span></span></span></span></span></span></p><p><span style="font-family: SimSun; font-size: 12pt;"><span style="font-family: Calibri-Bold; font-size: 9pt; color: rgb(255, 0, 0);"><span style="font-size: 9pt;"><span style="font-size: 12pt; color: rgb(0, 0, 0);"><br></span></span></span></span></p><p><span style="font-family: SimSun; font-size: 12pt;"><span style="font-family: Calibri-Bold; font-size: 9pt; color: rgb(255, 0, 0);"><span style="font-size: 9pt;"><span style="font-size: 12pt; color: rgb(0, 0, 0);"><br style="text-align: -webkit-auto;"></span></span></span></span><br><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">>>> re.sub('X', 'Mr. Smith', 'attn: X\n\nDear X,\n')<br><span style="font-size: 8pt;">'attn: Mr. Smith\012\012Dear Mr. Smith,\012'<br><span style="font-size: 8pt;">>>><br><span style="font-size: 8pt;">>>> re.subn('X', 'Mr. Smith', 'attn: X\n\nDear X,\n')<br><span style="font-size: 8pt;">('attn: Mr. Smith\012\012Dear Mr. Smith,\012', 2)<br><span style="font-size: 8pt;">>>><br><span style="font-size: 8pt;"><span style="font-size: 8pt;"><span style="font-size: 8pt;"><span style="font-size: 8pt;">>>> re.sub('[ae]', 'X', 'abcdef')<br><span style="font-size: 8pt;">'XbcdXf'<br><span style="font-size: 8pt;">>>> re.subn('[ae]', 'X’, 'abcdef')<br><span style="font-size: 8pt;">('XbcdXf', 2)</span></span></span></span></span></span></span></span></span></span></span></span><br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></p><p><span style="font-family: LucidaSansTypewriterStd; font-size: 8pt;">>>> re.sub(r'(\d{1,2})/(\d{1,2})/(\d{2}|\d{4})',<br><span style="font-size: 8pt;">... r'<span style="background-color: rgb(255, 255, 0);">\2</span>/<span style="background-color: rgb(255, 255, 0);">\1</span>/\3', '2/20/91') # Yes, Python is...<br><span style="font-size: 8pt;">'20/2/91'<br><span style="font-size: 8pt;">>>> re.sub(r'(\d{1,2})/(\d{1,2})/(\d{2}|\d{4})',<br><span style="font-size: 8pt;">... r'\2/\1/\3', '2/20/1991') # ... 20+ years old!<br><span style="font-size: 8pt;">'20/2/1991'</span></span></span></span></span><br style="line-height: normal; text-align: -webkit-auto; white-space: normal;"><br></span></p><p><br></p><p><br></p><p><br></p>

  

