---
author: lexiao
comments: true
date: 2019-05-15 11:11:11+00:00
layout: post
link: http://localhost/blog/?p=441
published: true
slug: null
title: redux 基础
wordpress_id: 441
categories:
- react
- 前端
---




[![](http://localhost/blog/wp-content/uploads/2019/05/01.png)](http://localhost/blog/wp-content/uploads/2019/05/01.png)




* * *




[![](http://localhost/blog/wp-content/uploads/2019/05/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190322180507.png)](http://localhost/blog/wp-content/uploads/2019/05/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190322180507.png)






* * *




* * *




3.1 Store

Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。

Redux 提供`createStore`这个函数，用来生成 Store。



const store = createStore(  
rootReducers,   
applyMiddleware(thunkMiddleware, logger)  
)  

API doc: [ https://redux.js.org/api/createstore](https://redux.js.org/api/createstore)  


注释：  



  1. 第一个参数应该是 reducer 函数
  2. 返回值是新生成的 store 对象




* * *




### 3.2 State

`Store`对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State。

当前时刻的 State，可以通过`store.getState()`拿到。

<blockquote><code style="border: none; direction: ltr; font-family: monospace, Consolas, Monaco, "Andale Mono"; font-size: 1.2em; hyphens: none; list-style-type: none; margin: 0px; padding: 0px; tab-size: 4; text-shadow: white 0px 1px; word-spacing: normal;"><span style="background-color: #f5f2f0;"><br></br>import </span><span style="background-color: #f5f2f0; border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span><span style="background-color: #f5f2f0;"> createStore </span><span style="background-color: #f5f2f0; border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><span style="background-color: #f5f2f0;"> from </span><span style="background-color: #f5f2f0; border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'redux'</span><span style="background-color: #f5f2f0; border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><span style="background-color: #f5f2f0;"><br></br><strike>const store </strike></span><strike><span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span><span style="background-color: #f5f2f0;"> </span><span style="background-color: #f5f2f0; border: none; color: #111111; list-style-type: none; margin: 0px; padding: 0px;">createStore<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span></span><span style="background-color: #f5f2f0;">fn</span><span style="background-color: #f5f2f0; border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span><span style="background-color: #f5f2f0; border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span></strike><span style="background-color: #f5f2f0;"><br></br><br></br></span><span style="background-color: #f9cb9c;">const state <span style="border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> store<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">.</span><span style="border: none; color: #111111; list-style-type: none; margin: 0px; padding: 0px;">getState<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span></span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span></span><span style="background-color: #f5f2f0;"><br></br></span></code>
>
> </blockquote>

Redux 规定， 一个 State 对应一个 View。只要 State 相同，View 就相同。你知道 State，就知道 View 是什么样，反之亦然。






* * *




### 3.3 Action

State 的变化，会导致 View 的变化。  
但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。

Action 是一个对象。其中的`type`属性是必须的，表示 Action 的名称。其他属性可以自由设置，社区有一个[规范](https://github.com/acdlite/flux-standard-action)可以参考。

<blockquote><code style="border: none; direction: ltr; font-family: monospace, Consolas, Monaco, "Andale Mono"; font-size: 1.2em; hyphens: none; list-style-type: none; margin: 0px; padding: 0px; tab-size: 4; text-shadow: white 0px 1px; word-spacing: normal;"><br></br>const action <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span><br></br>  type<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'ADD_TODO'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span><br></br>  payload<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'Learn Redux'</span><br></br><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br></code>
>
> </blockquote>

上面代码中，Action 的名称是`ADD_TODO`，它携带的信息是字符串`Learn Redux`。

[![](http://localhost/blog/wp-content/uploads/2019/05/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190322122102-300x20.png)](http://localhost/blog/wp-content/uploads/2019/05/25E5-25BE-25AE-25E4-25BF-25A1-25E6-2588-25AA-25E5-259B-25BE_20190322122102.png)


可以这样理解，Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。




* * *




### 3.4 Action Creator

View 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 Action Creator。

<blockquote><code style="border: none; direction: ltr; font-family: monospace, Consolas, Monaco, "Andale Mono"; font-size: 1.2em; hyphens: none; list-style-type: none; margin: 0px; padding: 0px; tab-size: 4; text-shadow: white 0px 1px; word-spacing: normal;"><br></br>const ADD_TODO <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'添加 TODO'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br><br></br><span style="border: none; color: #0077aa; list-style-type: none; margin: 0px; padding: 0px;">function</span> <span style="border: none; color: #111111; list-style-type: none; margin: 0px; padding: 0px;">addTodo<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span></span>text<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span><br></br>  <span style="border: none; color: #0077aa; list-style-type: none; margin: 0px; padding: 0px;">return</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span><br></br>    type<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> ADD_TODO<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span><br></br>    text<br></br>  <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><br></br><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><br></br><br></br>const action <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #111111; list-style-type: none; margin: 0px; padding: 0px;">addTodo<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span></span><span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'Learn Redux'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br></code>
>
> </blockquote>

上面代码中，`addTodo`函数就是一个 Action Creator。




* * *




## 3.6 Reducer

_Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。_

Reducer 是一个函数，它_接受 Action 和当前 State 作为参数，返回一个新的 State_。  
所有被包括在State 参数（一个对象）中的成员，会被connect函数认为是State的成员

<blockquote><code style="border: none; direction: ltr; font-family: monospace, Consolas, Monaco, "Andale Mono"; font-size: 1.2em; hyphens: none; list-style-type: none; margin: 0px; padding: 0px; tab-size: 4; text-shadow: white 0px 1px; word-spacing: normal;"><br></br>const reducer <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #0077aa; list-style-type: none; margin: 0px; padding: 0px;">function</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span>state<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span> action<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span><br></br> <span style="border: none; color: slategrey; list-style-type: none; margin: 0px; padding: 0px;" spellcheck="true"> // ...<br></br></span>  <span style="border: none; color: #0077aa; list-style-type: none; margin: 0px; padding: 0px;">return</span> new_state<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br></code>
>
> </blockquote>

整个应用的初始状态，可以作为 State 的默认值。下面是一个实际的例子。

<blockquote><code style="border: none; direction: ltr; font-family: monospace, Consolas, Monaco, "Andale Mono"; font-size: 1.2em; hyphens: none; list-style-type: none; margin: 0px; padding: 0px; tab-size: 4; text-shadow: white 0px 1px; word-spacing: normal;"><br></br>const defaultState <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #990055; list-style-type: none; margin: 0px; padding: 0px;">0</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br>const reducer <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span>state <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> defaultState<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span> action<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span> <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span><span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">></span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span><br></br>  switch <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span>action<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">.</span>type<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span><br></br>    case <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'ADD'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span><br></br>      <span style="border: none; color: #0077aa; list-style-type: none; margin: 0px; padding: 0px;">return</span> state <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">+</span> action<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">.</span>payload<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br>    default<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <br></br>      <span style="border: none; color: #0077aa; list-style-type: none; margin: 0px; padding: 0px;">return</span> state<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br>  <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><br></br><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br><br></br>const state <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #111111; list-style-type: none; margin: 0px; padding: 0px;">reducer<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span></span><span style="border: none; color: #990055; list-style-type: none; margin: 0px; padding: 0px;">1</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span><br></br>  type<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'ADD'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span><br></br>  payload<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #990055; list-style-type: none; margin: 0px; padding: 0px;">2</span><br></br><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br></code>
>
> </blockquote>

上面代码中，`reducer`函数收到名为`ADD`的 Action 以后，就返回一个新的 State，作为加法的计算结果。其他运算的逻辑（比如减法），也可以根据 Action 的不同来实现。

实际应用中，Reducer 函数不用像上面这样手动调用，`store.dispatch`方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入`createStore`方法。

<blockquote><code style="border: none; direction: ltr; font-family: monospace, Consolas, Monaco, "Andale Mono"; font-size: 1.2em; hyphens: none; list-style-type: none; margin: 0px; padding: 0px; tab-size: 4; text-shadow: white 0px 1px; word-spacing: normal;"><br></br>import <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span> createStore <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span> from <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'redux'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br>const store <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #111111; list-style-type: none; margin: 0px; padding: 0px;">createStore<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span></span>reducer<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br></code>
>
> </blockquote>

上面代码中，`createStore`接受 Reducer 作为参数，生成一个新的 Store。以后每当`store.dispatch`发送过来一个新的 Action，就会自动调用 Reducer，得到新的 State。

为什么这个函数叫做 Reducer 呢？因为它可以作为数组的`reduce`方法的参数。请看下面的例子，一系列 Action 对象按照顺序作为一个数组。

<blockquote><code style="border: none; direction: ltr; font-family: monospace, Consolas, Monaco, "Andale Mono"; font-size: 1.2em; hyphens: none; list-style-type: none; margin: 0px; padding: 0px; tab-size: 4; text-shadow: white 0px 1px; word-spacing: normal;"><br></br>const actions <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">[</span><br></br>  <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span> type<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'ADD'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span> payload<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #990055; list-style-type: none; margin: 0px; padding: 0px;">0</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span><br></br>  <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span> type<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'ADD'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span> payload<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #990055; list-style-type: none; margin: 0px; padding: 0px;">1</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span><br></br>  <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">{</span> type<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #669900; list-style-type: none; margin: 0px; padding: 0px;">'ADD'</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span> payload<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">:</span> <span style="border: none; color: #990055; list-style-type: none; margin: 0px; padding: 0px;">2</span> <span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">}</span><br></br><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">]</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><br></br><br></br>const total <span style="background: rgba(255 , 255 , 255 , 0.5); border: none; color: #a67f59; list-style-type: none; margin: 0px; padding: 0px;">=</span> actions<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">.</span><span style="border: none; color: #111111; list-style-type: none; margin: 0px; padding: 0px;">reduce<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">(</span></span>reducer<span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">,</span> <span style="border: none; color: #990055; list-style-type: none; margin: 0px; padding: 0px;">0</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">)</span><span style="border: none; color: #999999; list-style-type: none; margin: 0px; padding: 0px;">;</span><span style="border: none; color: slategrey; list-style-type: none; margin: 0px; padding: 0px;" spellcheck="true"> // 3<br></br></span></code>
>
> </blockquote>

上面代码中，数组`actions`表示依次有三个 Action，分别是加`0`、加`1`和加`2`。数组的`reduce`方法接受 Reducer 函数作为参数，就可以直接得到最终的状态`3`。




* * *





* * *





* * *





* * *





* * *





* * *
