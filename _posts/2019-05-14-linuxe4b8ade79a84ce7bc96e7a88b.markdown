---
author: lexiao
comments: true
date: 2019-05-14 01:35:55+00:00
layout: post
link: http://localhost/blog/?p=359
slug: linux%e4%b8%ad%e7%9a%84c%e7%bc%96%e7%a8%8b
title: linux中的c编程
wordpress_id: 359
categories:
- C++
---

 

**程序内存的结构**

 

.bss （未初始化的全局变量）

 

存放没有初始化或者初始值为0的全局变量。  
只占用运行时的内存空间，而不占用文件空间（即不包含在程序文件内容中）。  
在整个程序运行周期内，bss段一直存在。  
  
.data （已经初始化的全局变量）

 

存放有非0初始值的全局变量。  
占用运行时的内存空间，也占用文件空间。（所以，初始化为0能节省文件空间）。  
在整个程序运行周期内，data段一直存在。  
  
  
.rodata （常量数据）

 

 
  * 存放常量数据。  
不是所有常量都放在这个段，有的是放在text里面。   
  * 对于字符串常量，编译器会自动删除重复的，保证一个exe中只存在一个副本。   
  * 在多个进程间是共享的，   
  * 常量不能修改   
  * 字符串常量会被放到该段   
  * 加const关键字的数据会被放到该段。
 

 

.text（代码段） 

 

 
  * 存放代码（如函数）和部分整数常量。   
  * 特性与 rodata 相似   
  * text 段是可以执行的。
 

 

stack （栈）

 

 
  * 存放临时变量和函数参数的。   
  * 栈是向下（低地址）增长的，每向栈中push一个元素，栈顶就向低地址扩展；每pop一个元素，栈顶就向高地址回退。   
  * 存放在栈中的数据只在当前函数及下一层函数中有效。
 

heap （堆）

 

 
  * 由使用者控制的临时内存   
  * 使用 malloc/ realloc / free 分配和取消。
 

 

* * *

   

库文件

 

 

静态库

 

 
  * 扩展名为 .a   
  * 是使用 ar 命令把多个目标文件打包而生成的   
  * 可执行文件链接静态库时，会把用到的函数和数据复制过去；多个可执行文件链接同一个静态库时，所用到的函数和数据会被复制多次。
 

共享库

 

 
  * 共享库可以在多个可执行文件之间共享，链接时不用拷贝函数和数据，只是建立一个函数链接表。好处是避免空间浪费，坏处是额外运算。另外一个好处是升级容易，理论上，修改共享库不需要重新编译依赖它的程序。
 

可执行文件

 

 
  * ELF文件。在编译时连接静态库，把所用到的函数复制过来，运行时不依赖于静态库。
 

 

* * *

   

内存管理

 

 
  1. 共享内存     
    1. 每个进程的地址空间是独立的，它们之间互不影响。     
      1. 每个进程的地址空间变大了   
      2. 一个进程崩溃，不会影响其他进程。
 
    2. 进程的独立地址需要硬件的帮助，这种硬件称为MMU（Memory Manage Unit）。     
      1. 内存分为物理内存和虚拟内存。   
      2. 访问虚拟内存时，MMU根据页表进行地址mapping。   
      3. 由于物理内存较少，系统会把不用的内存数据存放到硬盘。   
      4. 从虚拟内存到物理内存的映射的最小单位是页（page），页大小一般是4kb。当程序需要的页不在物理内存里时，MMU产生一个缺页中断，并挂起当前进程，，ISR负责把数据读出。
 
  2. 设计惯用手法     
    1. 预分配     
      1. 要点：预先分配一大块内存，而不是需要多大才分配多大。   
      2. 优点：节省处理时间；减少内存碎片   
      3. 缺点：占用多余内存，要视乎经验决定预分配区域大小。
 
    2. 对象引用（object reference）计数     
      1. 要点：当指针被引用时，对其引用计数器加1，不引用时，减1。   
      2. 优点：防止误销毁正在被引用的对象，出现野指针。   
      3. 缺点：
 
    3. 写时复制（copy-on-write）     
      1. 要点：对于一些需要复制的内存内容，仅仅作个标记，例如是对象引用计数；只有当真正需要写入（修改）内容的时候，才进行复制。   
      2. 优点：优化性能。   
      3. 缺点：
 
    4. 固定大小分配（缓冲池分配）     
      1. 要点：先分配一块或多块连续的大块内存，把它们分成N块大小相等的小块内存，然后进行二次分配。   
      2. 优点：在需要频繁分配大量小块内存的时候，可以减少内存碎片，提高空间利用率。   
      3. 缺点：
 
    5. 会话（session）缓冲池分配     
      1. 要点：在某个过程开始时创建会话缓冲池，这个过程中所有内存分配都通过其实现，当这个过程结束时，销毁缓冲池。   
      2. 优点：多次分配一次释放，减少内存泄露可能累积造成的问题。   
      3. 缺点：
 

 

* * *

   

 

文本处理技巧

 

 

 
  1. 使用状态机对文本进行处理
   
    1. 实现要点：
   
      1. 状态集 —— 所有可能出现的状态的集合，在c语言可以用 enum 表示
 
      2. 字母表 —— 导致状态发生切换的事件的集合
 
      3. 状态转移函数 —— 在状态发生转变时，所需要调用的函数，在c语言里可以通过传入回调函数指针实现
 
      4. 初始状态 —— 程序（函数）开始运行时所处的状态
 
      5. 接收状态 —— 所有可能出现的终结状态的集合
 
    2. 设计要点：
   
      1. 状态划分要精确，可考虑多层状态
 
      2. 状态转移，可以通过画出状态图帮助分析
 
      3. 文本的解析和处理应该隔离，以隔离变化和降低复杂度
 

 

 

 

 

 

 

 

 
